pipeline {
    agent any
    environment {
        DOCKER_PASS = credentials('docker_pass')
        SONAR_TOKEN = credentials('sonar_token')
        TARGET_HOST = '192.168.56.71'
        //TAG_VERSION = '1.0'
    }
    stages {
        stage('Test') {
            agent { docker 'node:18-alpine3.16' }
            steps {
                sh 'npm install'
                sh 'npm test'
            }
            post {
                always {
                    archiveArtifacts artifacts: 'test-report.html', followSymlinks: false
                }
            }
        }
        stage('CodeInspection'){
            steps{
                withSonarQubeEnv('SonarCloud'){
                    sh '/var/jenkins_home/.sonar/sonar-scanner-4.7.0.2747-linux/bin/sonar-scanner \
                        -Dsonar.organization=gb-at20 \
                        -Dsonar.projectKey=AT20-GB \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=https://sonarcloud.io'
                }
            }
        }
        stage("Quality Gate"){
            steps {
                timeout(time: 400, unit: 'SECONDS') { 
                    script {
                        def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        stage('Package'){
            steps {
                sh 'docker build -t at20-meeting_service .'
            }
        }
        stage('Publish'){
            steps {
                sh 'export TAG_VERSION=${git log --pretty=format:'%h' -n 1}'
                sh 'docker login -u gioblanco -p ${DOCKER_PASS}'
                sh 'docker tag at20-meeting_service gioblanco/meeting-service:${env.GIT_COMMIT}'
                sh 'docker push gioblanco/meeting-service:${env.GIT_COMMIT}'
            }
        }
        stage('DeployToDev'){
            steps {
                sh 'docker-compose -e TAG=${env.GIT_COMMIT} -f docker-compose.gb.yaml up -d'
                sh 'echo command to run smoke test'
            }
        }
        stage('DeployToAUTO'){
            steps {
                sh 'DOCKER_HOST=ssh://$TARGET_HOST docker-compose -e TAG=${env.GIT_COMMIT} -f docker-compose.gb.yaml up -d'
                sh 'echo command to run automation tests'
            }
        }
    } 
    post {
        always {
            sh 'docker image prune -a'
            //sh 'docker rmi $(docker images -f "dangling=true" -q)'
            sh 'docker system prune -a'
        }
    }
}