pipeline {
    agent any
    environment {
      DOCKER_PASS = credentials('docker_pass')
      SONAR_TOKEN = credentials('sonar_token')
      TARGET_HOST = '192.168.0.38'
      GIT_COMMIT_HASH = sh (script: "git rev-parse --short HEAD", returnStdout: true).trim()
    }   
    stages {
        stage('Test'){
            agent { 
                docker {
                    image 'node:18-alpine3.16'
                }
             }
            steps {
                sh 'npm install'
                sh 'npm test'
            }
             post {
                always {
                    archiveArtifacts artifacts: 'test-report.html', followSymlinks: false
                }
            }    
        }
        stage('CodeInspection'){
            steps {
                withSonarQubeEnv('sonarcloud'){
                    sh '/var/jenkins_home/.sonar/sonar-scanner-4.7.0.2747-linux/bin/sonar-scanner \
                        -Dsonar.organization=at20-lr \
                        -Dsonar.projectKey=at20-lr \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=https://sonarcloud.io'
                }

            }
        }
        stage('Quality Gate'){
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error 'Pipeline aborted due to quality gate failure: ${qg.status}'
                        }
                    }
                }
            }
        }
        stage('Package') {
            steps {
                sh 'docker build -t at20_meeting_service .'
            }
        }
        stage('Publish') {
            steps {
                sh 'docker login -u lorenasing -p ${DOCKER_PASS}'
                sh 'docker tag at20_meeting_service lorenasing/meeting_service:${GIT_COMMIT_HASH}'
                sh 'docker push lorenasing/meeting_service:${GIT_COMMIT_HASH}'
            }
        }
        stage('DeployToDev') {
            steps {
                sh 'echo TAG_VERSION'
                sh 'export TAG_VERSION=${GIT_COMMIT_HASH} && docker-compose -f docker-compose.lr.yaml up -d'
                sh 'echo command to run smoke test'
            }
        }
        stage('DeployAuto') {
            steps {
                sh 'export TAG_VERSION=${GIT_COMMIT_HASH} && DOCKER_HOST=ssh://$TARGET_HOST docker-compose -f docker-compose.lr.yaml up -d'
                sh 'echo command to run automation tests'
            }
        }
    }
    post {
        always {
            sh 'docker image prune -a -f'
            sh 'docker system prune -a -f'
        }
        success {
            emailext body: 'The Meeting service build was executed successfully. Logs: ',
                    subject: '"Meeting Service" Success',
                    to: 'malorasi@gmail.com',
                    attachLog: true
        }
        failure {
            emailext body: 'The Meeting service build was failed. Logs: ',
                    subject: '"Meeting Service" Failed',
                    to: 'malorasi@gmail.com',
                    attachLog: true
        }
    }
}
